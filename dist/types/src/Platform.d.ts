import EventReceiver from "./EventReceiver";
import Shape from "./Shape";
import { IShapeCfg, IShapeContent } from "./ShapeRegister";
declare type InputShapeOrID = Shape | string;
declare const dfOptions: {
    width: number;
    height: number;
    bgColor: string;
};
export declare type AntOptions = typeof dfOptions;
export default class Platform extends EventReceiver {
    private container;
    private options;
    private canvas;
    private ctx;
    private Image;
    private scale;
    private offset;
    private shapeRegister;
    private drawing;
    private cache;
    private activeShape;
    private shapeList;
    private eventHook;
    private fontSize;
    private continuity;
    private isGuideLine;
    private isTagShow;
    private renderLocker;
    constructor(container: HTMLDivElement, options?: AntOptions);
    reset(): void;
    init(): void;
    initMouseEvent(): void;
    initGuideLine(): void;
    initImageEvent(): void;
    initDrawEvent(): void;
    initShapeEvent(): void;
    load(source: string | File): Promise<unknown>;
    register(name: string, options: IShapeCfg): void;
    createShape(name: string, options?: IShapeContent): Shape;
    label(name: string, continuity?: boolean): void;
    addShape(shape: Shape, idx?: number): void;
    remove(input: Shape | string): void;
    setActive(shape: Shape): void;
    cancel(): void;
    orderShape(input: InputShapeOrID, flag?: boolean): void;
    private findShapeIndex;
    getShapeList(): Shape[];
    getShapeByName(name: string): Shape[];
    private loseActive;
    guideLine(status?: boolean): void;
    tagShow(status?: boolean): void;
    setContinuity(status: boolean): void;
    clearCanvas(): void;
    renderBackground(): void;
    renderImage(): void;
    renderGuideLine(): void;
    private renderShape;
    private renderCache;
    private renderShapeList;
    forceRender(): void;
    render(): void;
}
export {};
